generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Client {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  password     String
  Appointments Appointments[]
}

model Professional {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  password     String
  Services     Services[]
  Availability Availability[]
  Appointments Appointments[]
}

model Services {
  id             String         @id @default(cuid())
  professional   Professional   @relation(fields: [professionalId], references: [id])
  professionalId String
  serviceName    String         @unique
  description    String
  price          Float
  Appointments   Appointments[]
}

model Availability {
  id             String       @id @default(cuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  dayOfWeek      Int // 1 (segunda-feira) até 7 (domingo)
  startTime      Float // Horário de início no formato Float. Ex: 14.5 = 14:30
  endTime        Float // Horário de término no formato Float. Ex: 15.5 = 15:30
}

model Appointments {
  id             String       @id @default(cuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  service        Services     @relation(fields: [servicesId], references: [id])
  servicesId     String
  client         Client       @relation(fields: [clientId], references: [id])
  clientId       String
  status         Status       @default(PENDING)
  date           DateTime     @db.Date()
  startTime      Float // Horário de início no formato Float. Ex: 14.5 = 14:30
  endTime        Float // Horário de término no formato Float. Ex: 15.5 = 15:30
  textMessage    String?
}

enum Status {
  PENDING
  ACCEPT
  REJECTED
  CANCELED
}
